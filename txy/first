软件体系结构风格读书报告（web环境的混合体系结构风格）
1.对软件体系结构的认知
软件结构体系是随着软件工程的发展逐步发展起来的。20世纪90年代，人们开始对软件体系结构进行研究，当时，软件系统的程度的提高和规模的扩大使得软件开发人员开始感到困难，而且，开发出的软件质量也难以保证。此时，MarShaw和DavidGarlan论文中提出了软件体系结构的概念，定义为“能够用来具体描述软件系统控制结构和整体组织的一种体系结构，能够表示系统的框架，用于从较高层次上来描述各部分之间的关系和接口”。
通过使用软件体系结构，可以有效地分析用户需求、方便系统的修改以及减小程序构造风险。随着软件规模的不断扩大和复杂程度的日益提高，系统框架结构的设计变得越来越关键。软件框架设计的核心问题是能否重用已经成型的体系结构方案。由此产生了软件体系结构的风格。
通常，软件体系结构风格也称为软件体系结构的惯用模式，它是不同系统所拥有的共同组织结构和语义特征，是构件和连接件之间相互作用的形式化说明，用于指导将多个模块组织成一个完整的应用程序。软件体系结构风格包括构件、连接件和一组将它们结合在一起的约束限制，例如拓扑限制和语义限制。
对于高质量的软件产品而言，首先要为其选择合适的体系结构风格，这样才能更好地重用已有的设计方案和实现方案。
2.混合体系结构风格出现的原因
但是随着信息系统的规模和复杂度不断扩大，单种软件体系结构风格已经不能满足系统开发约束性的要求，必须引入其他风格形成一种混合风格以便指导系统的开发。经过长期的大型软件设计与开发，人们总结了一系列风格，为系统级别的复用提供了可能，并带来了有效的框架复用和编码复用。风格的研究与应用是一个重要的领域，M. Shaw 等人指出模式和风格是一个工程领域成熟的标志[1]。目前，在体系结构风格的总结以及形式化描述等方面 有些研究成果，但在风格组合以及组合的指导方法上 研究很少。在现有风格基础上，依据WEB应用系统设 计规格约束提出了一种混合风格RROS(Rich Representational Orthogonal Service)，并在 CKM (Customer Knowledge Management)系统中进行了初步应用。
3.RROS体系结构风格定义
3.1软件体系结构风格的定义
  一种体系结构风格包括一个术语表和一组约束集合，术语表中包含一些构件和连接件类型，而约束集合指出系统如何将这些构件和连接件组合到一起。事实上，一种体系结构风格决定了一种体系结构框架。软件体系结构风格可由三元组 SAS={Components, Connectors, Design Criteria} 来表示，其中：
(1) Components是构件的集合，他提供了系统的基本功能和操作，构成了一个系统的基本框架。 
(2) Connectors是连接件的集合，表示构件之间的交互方式，定义构件之间的交互规则，如交互特性和交互的数据类型。 
(3) Design Criteria 包括了构件和连接件的使用、选择以及约束限制等。
软件体系结构风格的定义如下： 
  . 软件体系结构风格是一组术语表和约束的集合，是在某一视图下的软件体系结构。SA 表示软件 体系结构，AS 表示 SA 的风格。 
AS= {SA| abstract views, terms, constraints}. 
且 SA=instance(AS)，其中 abstract views 表示抽象视图，terms表示术语表，constraints 表示 约束集。
3.2软件体系结构风格比较表
  软件体系结构风格的形成是多年研究和工程实践的经验积累。体系结构风格决定着体系结构模型，决定着构件的映射和构件间的连接。风格只描述系统的整体结构框架，不传达系统的细节，带有整体性、普遍性、一般性、抽象性的特点。风格比较主要从风格所提供的约束对系统性能指标的支持粒度进行比较。有的研究者从比较矩阵的角度来支持对风格的选择，并进行了适当的量化，但是比较矩阵还是依赖于经验值。通过对风格的约束所导致的一些属性的比较分析来指导风格的选择，依赖于经验值。比较表主要从性能、可伸缩性、简单性、可进化性、可扩展性等几个指标来评价每种风格的导致属性。系统属性是相对的，引入一种风格、添加一种约束可能会增强也可能会减弱另一个系统属性。风格在应用于不同领域的系统时，会有不同的效果。
  表1展示了软件架构风格的比较表，其中减号表示消极影响，加号代表积极影响，加减号表示依赖于问题的领域或问题场景。该表并不是所有风格以及所有属性的清单，而是列出了对web构建有指导意义的属性和风格。
 
3.3 WEB应用系统的期望约束集
  在复杂的应用系统创建的过程中，尤其是将几个不同风格的子系统集成为一个完整的复杂大系统，仅靠单独一种体系结构风格的指导是很难满足的。解决这个问题只能通过若干个风格的集成，再用来指导系统的构建。
 
基于 WEB 模式的企业业务系统更多的关注开发成本、业务敏捷性、接口的统一、关注点的分离以及方便集成扩展和更好的用户体验。表 2 识别出了 WEB 系统 所期望得到的属性，并结合第 2.3节介绍的风格比较表，我们选择了会导致这些属性的体系结构风格，将他们与早期的WEB 风格结合形成一种新的、混合的现代 WEB 风格，这种风格能够更好的反应现代 WEB 系统所期望的属性。比如通过简化和标准化接口来满足“统一接口”和“方便集成”的约束，这方面 REST 风格和 SOA 风格做得最好，选择了 SOA 风格；WEB 系统往往通过 缓存来提高服务性能，这方面缓存风格和 REST 风格可以满足，而 REST 风格本身就关注缓存和中间件技术， 所以这里引入了 REST 风格；再如通过引入富客户端技术来满足“减少网络延时”的约束，这里引入了 RIA 风 格。经过这样的比较分析我们确立了 RROS 混合风格。本表格并不是穷尽 WEB 应用系统的所有约束，对于约束，软件开发中任何需求、管理、过程等的变 动都会引入约束，本表只关心 WEB 系统中最核心的开发实现约束集。
3.4RROS混合体系结构风格的特点
RROS 风格叠加了RIA、REST、正交、 SOA风格的约束，增强了 WEB 开发的特性。RROS 风格是对 WEB 应用系统的一种抽象，忽略的构件实现 和协议语义的细节，以便聚焦于构件之间交互的约束 上，它代表了 WEB 应用行为的本质。
 按照第 3.1节体系结构风格定义，对RROS 风格 的抽象视图不做限制，可依据具体需求提供适当的视图，比如系统的上下文图、应用体系结构图、接口视图、业务视图等等；RROS 的术语表包括资源、服务、线索、层次、缓存、中间件、用户体验、业务对齐等； 对于约束集如表 2 所示。 
RROS 风格是一组系统构架约束，当作为一个整体应用时，它强调构件之间交互的可伸缩性、接口的通用性、构件的独立部署、减少交互延迟和增强用户体验、最大限度的利用现有系统及对资源的服务封装。 RROS 风格体现的六大核心特点： 
(1) 支持标准化、开放性的理念和技术 
(2) 统一资源描述、简化操作接口和领域概念 
(3) 结构上，基于线索的层次划分 
(4) 关注缓存和中间件技术 
(5) 关注网络交互效率和用户体验 
(6) 面向服务的集成和业务对齐理念

4RROS在CKM系统中的应用
4.1 CKM系统简介
面对日益加剧的竞争环境，企业必须比以往任何 时候更积极与客户打交道，使他们参与企业的产品研发、市场营销、测试和销售。也就是说企业必须实施客户知识管理(CKM ， Customer Knowledge Management)，以提升核心竞争力。CKM 系统是构建客户统一视图、进行客户研究、管理并传播客户知识的开放平台，为运营商实施以客 户为中心的信息运营提供支撑。CKM可以说是 CRM 与 KM 的结合，使得 CKM 既具有知识管理的特性，又有客户管理的理念。
4.2 CKM上下文体系结构与业务体系结构
 
图 1 是 CKM 系统上下文体系结构，客户知识管理平台主要业务功能是客户的提取、客户行为分析以及客户知识积累等。数据源来自 BOSS，CRM 等业务运营系统，在本平台中形成客户知识，并把知识传播到营销管理平台和广告平台等运营系统中，实现了客 户提取的智能化。


 
图 2 是 CKM 系统的业务体系结构。从业务角度、客户知识平台可以划分为 5 个层次：(1)客户数据整合层：平台提供广泛的数据访问接口，从各个数据源获得客户数据，并根据业务规则对数据进行整合，形成客户统一视图。(2)基础功能组件：提供平台所需的基 本报表分析，规则管理的功能。(3)业务组件层：用户可以借助客户统一视图，利用第三方工具对客户做专题分析，如通话习惯分析、渠道偏好分析、行为轨迹分析、分析所得到的规则、模型等研究成果可以通过平台统一管理以丰富客户知识。(4)对外服务层：客户知识管理系统通过标准的接口为各运营系统提供客户 知识服务，如为营销平台和广告平台提供目标客户提取服务，为其他行业应用提供统一客户视图。(5)公共组件层：提供系统管理的功能。CKM 需要和几个业务运营系统进行数据交互，数据量比较大，因此接口设计上应尽量简单和标准化；在客户知识概念的描述上也应该简化；方便其他异构系统提取某个客户的基本知识和扩展知识；CKM 系统要求有更好的用户体验和网络交互性能；通常 CKM 以轻量级、嵌入式的形式集成到其他系统，因此对可集成性要求较高。从上面的总结可以发现 CKM 所期望的约束集是 RROS 风格所提供的约束集或者特性的一个子集，下面将介绍为支持 CKM 开发所做的技术和框架的选型。
4.3满足RROS风格约束条件的技术和框架
依据 CKM 的上下文体系结构和业务体系结构需求可以发现 RROS 风格完全满足了其构架需求。为了满足 RROS 风格的设计约束，CKM 系统在体系结构设 计时选择了一系列开发框架如图 3。
 
为了满足系统的开放性和标准化，我们选择了J2EE 平台，并把开源的Liferay 系统作为开发基础，CKM 在此基础上演化，从而最大化地复用已有的构件和技术；为了满足用户体验约束，在界面表示层我们选择了 Ext 做客户端实现技术；为了简化客户知识概念，在系统应用层对原有的客户属性、客户标签、客户列表等概念进行了资源封装，这里我们选择了 Restlet 资源引擎，统一了资源访问接口；在可集成性上，我们选择了XFire 技术作为服务封装的实现框架；系统功能结构上采用水平层次和垂直线索式的划分，在构件依赖配置和事务管理方面选择了Spring 框架，在数据持久封装化方面采用了 Hibernate 框 架；在大数据量集成上，采用 ETL 工具和 FTP 协议以及标准化的数据文件和校验文件，简化了数据集成接口；体系结构设计工具我们采用了 Structure101，方便了设计师设计体系结构以及更好的约束开发人员的 开发活动，这几大框架和技术的联合满足了 RROS 风 格在 CKM 系统上的主要约束，也体现了 RROS 风格所定义的六大核心特性。
5总结
RROS 风格在系统的不同层次不同抽象级别上应用了不同的风格，增强了系统的互操作性、重用性、简单性、可伸缩性等，方便分工和管理，极大地缩短了开发时间。不同项目的系统设计要求选择不同的风格，每一种风格都有其优缺点，切不可生搬硬套，选择最合适的风格才是成功的关键。




SOA: 在SOA架构风格中，服务是最核心的抽象手段，业务被划分(组件化)为一系列粗粒度的业务服务和业务流程。业务服务相对独立、自包含、可重用，由一个或者多个分布的系统所实现，而业务流程由服务组装而来。一个"服务"定义了一个与业务功能或业务数据相关的接口，以及约束这个接口的契约，如服务质量要求、业务规则、安全性要求、法律法规的遵循、关键业绩指标(Key Performance Indicator，KPI)等。接口和契约采用中立、基于标准的方式进行定义，它独立于实现服务的硬件平台、操作系统和编程语言。这使得构建在不同系统中的服务可以以一种统一的和通用的方式进行交互、相互理解。除了这种不依赖于特定技术的中立特性，通过服务注册库(Service Registry)加上企业服务总线(Enterprise Service Bus)来支持动态查询、定位、路由和中介(Mediation)的能力，使得服务之间的交互是动态的，位置是透明的。技术和位置的透明性，使得服务的请求者和提供者之间高度解耦。这种松耦合系统的好处有两点：一点是它适应变化的灵活性;另一点是当某个服务的内部结构和实现逐渐发生改变时，不影响其他服务。而紧耦合则是指应用程序的不同组件之间的接口与其功能和结构是紧密相连的，因而当发生变化时，某一部分的调整会随着各种紧耦合的关系引起其他部分甚至整个应用程序的更改，这样的系统架构就很脆弱了。
　　SOA架构带来的另一个重要观点是业务驱动IT，即IT和业务更加紧密地对齐。以粗粒度的业务服务为基础来对业务建模，会产生更加简洁的业务和系统视图;以服务为基础来实现的IT系统更灵活、更易于重用、更好(也更快)地应对变化;以服务为基础，通过显式地定义、描述、实现和管理业务层次的粗粒度服务(包括业务流程)，提供了业务模型和相关IT实现之间更好的"可追溯性"，减小了它们之间的差距，使得业务的变化更容易传递到IT。
因此，可以将SOA的主要优点概括为：IT能够更好更快地提供业务价值(Business Centric)、快速应变能力(Flexibility)、重用(Reusability)。
REST：REST是一种软件架构风格，或者说是一种规范，其强调HTTP应当以资源为中心，并且规范了URI的风格；规范了HTTP请求动作（GET/PUT/POST/DELETE/HEAD/OPTIONS）的使用，具有对应的语义。
核心概念包括：
资源（Resource）：
  在REST中，资源可以简单的理解为URI，表示一个网络实体。比如，/users/1/name，对应id=1的用户的属性name。既然资源是URI，就会具有以下特征：名词，代表一个资源；它对应唯一的一个资源，是资源的地址。
表现（Representation）：
  是资源呈现出来的形式，比如上述URI返回的HTML或JSON，包括HTTP Header等；
  REST是一个无状态的架构模式，因为在任何时候都可以由客户端发出请求到服务端，最终返回自己想要的数据，当前请求不会受到上次请求的影响。也就是说，服务端将内部资源发布REST服务，客户端通过URL来定位这些资源并通过HTTP协议来访问它们。




